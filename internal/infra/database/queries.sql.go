// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"

	"github.com/shopspring/decimal"
)

const atualizarCliente = `-- name: AtualizarCliente :execresult
UPDATE Clientes SET Nome = ?, Email = ?, Cpf = ?
WHERE Id = ?
`

type AtualizarClienteParams struct {
	Nome  sql.NullString
	Email sql.NullString
	Cpf   sql.NullString
	ID    string
}

func (q *Queries) AtualizarCliente(ctx context.Context, arg AtualizarClienteParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, atualizarCliente,
		arg.Nome,
		arg.Email,
		arg.Cpf,
		arg.ID,
	)
}

const atualizarProduto = `-- name: AtualizarProduto :execresult
UPDATE Produtos SET Nome = ?, Valor = ?, Descricao = ?, Categoria = ? 
WHERE Id = ?
`

type AtualizarProdutoParams struct {
	Nome      string
	Valor     decimal.Decimal
	Descricao sql.NullString
	Categoria int32
	ID        string
}

func (q *Queries) AtualizarProduto(ctx context.Context, arg AtualizarProdutoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, atualizarProduto,
		arg.Nome,
		arg.Valor,
		arg.Descricao,
		arg.Categoria,
		arg.ID,
	)
}

const deletarPedido = `-- name: DeletarPedido :exec
DELETE FROM Pedidos WHERE NumeroPedido = ?
`

func (q *Queries) DeletarPedido(ctx context.Context, numeropedido int32) error {
	_, err := q.db.ExecContext(ctx, deletarPedido, numeropedido)
	return err
}

const deletarProduto = `-- name: DeletarProduto :exec
DELETE FROM Produtos WHERE Id = ?
`

func (q *Queries) DeletarProduto(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletarProduto, id)
	return err
}

const inserirCliente = `-- name: InserirCliente :exec
INSERT INTO Clientes (Id, Nome, Email, Cpf)
VALUES (?, ?, ?, ?)
`

type InserirClienteParams struct {
	ID    string
	Nome  sql.NullString
	Email sql.NullString
	Cpf   sql.NullString
}

func (q *Queries) InserirCliente(ctx context.Context, arg InserirClienteParams) error {
	_, err := q.db.ExecContext(ctx, inserirCliente,
		arg.ID,
		arg.Nome,
		arg.Email,
		arg.Cpf,
	)
	return err
}

const inserirProduto = `-- name: InserirProduto :exec
INSERT INTO Produtos (Id, Nome, Valor, Descricao, Categoria) 
VALUES (?, ?, ?, ?, ?)
`

type InserirProdutoParams struct {
	ID        string
	Nome      string
	Valor     decimal.Decimal
	Descricao sql.NullString
	Categoria int32
}

func (q *Queries) InserirProduto(ctx context.Context, arg InserirProdutoParams) error {
	_, err := q.db.ExecContext(ctx, inserirProduto,
		arg.ID,
		arg.Nome,
		arg.Valor,
		arg.Descricao,
		arg.Categoria,
	)
	return err
}

const obterClientePorCpf = `-- name: ObterClientePorCpf :one
SELECT id, nome, cpf, email FROM Clientes WHERE Cpf = ?
`

func (q *Queries) ObterClientePorCpf(ctx context.Context, cpf sql.NullString) (Cliente, error) {
	row := q.db.QueryRowContext(ctx, obterClientePorCpf, cpf)
	var i Cliente
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Cpf,
		&i.Email,
	)
	return i, err
}

const obterPedidoPorNumeroPedido = `-- name: ObterPedidoPorNumeroPedido :one
SELECT id, cliente_id, valor, status, data, numeropedido FROM Pedidos WHERE NumeroPedido = ?
`

func (q *Queries) ObterPedidoPorNumeroPedido(ctx context.Context, numeropedido int32) (Pedido, error) {
	row := q.db.QueryRowContext(ctx, obterPedidoPorNumeroPedido, numeropedido)
	var i Pedido
	err := row.Scan(
		&i.ID,
		&i.ClienteID,
		&i.Valor,
		&i.Status,
		&i.Data,
		&i.Numeropedido,
	)
	return i, err
}

const obterProdutosPorCategoria = `-- name: ObterProdutosPorCategoria :many
SELECT id, nome, descricao, categoria, valor FROM Produtos WHERE Categoria = ?
`

func (q *Queries) ObterProdutosPorCategoria(ctx context.Context, categoria int32) ([]Produto, error) {
	rows, err := q.db.QueryContext(ctx, obterProdutosPorCategoria, categoria)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Produto
	for rows.Next() {
		var i Produto
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Descricao,
			&i.Categoria,
			&i.Valor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const obterTodosProdutos = `-- name: ObterTodosProdutos :many
SELECT id, nome, descricao, categoria, valor FROM Produtos
`

func (q *Queries) ObterTodosProdutos(ctx context.Context) ([]Produto, error) {
	rows, err := q.db.QueryContext(ctx, obterTodosProdutos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Produto
	for rows.Next() {
		var i Produto
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Descricao,
			&i.Categoria,
			&i.Valor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
